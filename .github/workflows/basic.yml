name: Basic Tests and Documentation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: "Generate docs"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:    ["ubuntu-20.04"]
        cxx:   ["g++"]
        cc:    ["gcc"]
        ver:   ["9"]
        py:    ["3.6"]
        cmake: ["3.12.x"]
        mpi:   ["ON"]
    env:
        CC:         ${{ matrix.cc }}-${{ matrix.ver }}
        CXX:        ${{ matrix.cxx }}-${{ matrix.ver }}
        PY:         python${{ matrix.py }}
        PYTHONPATH: /usr/local/lib/$PY/site-packages/:${PYTHONPATH}
    steps:
      - name: Set up cmake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: ${{ matrix.cmake }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
      - name: OpenMPI cache
        uses: actions/cache@v2
        id:   cache-ompi  # give it a name for checking the cache hit-or-not
        with:
          path: openmpi-4.0.2  # what we cache: the folder
          key:  ${{ matrix.os }}-ompi-${{ matrix.cxx }}-${{ matrix.ver }}
      - name: Build OpenMPI
        #if: ${{ steps.cache-ompi.outputs.cache-hit != 'true' }}
        run: |
           export CC=${{ matrix.cc }}-${{ matrix.ver }}
           export CXX=${{ matrix.cxx }}-${{ matrix.ver }}
           wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.2.tar.gz
           tar -xvf ./openmpi-4.0.2.tar.gz
           cd openmpi-4.0.2
           ./configure --disable-mpi-fortran
           make -j
           cd -
      - name: Install OpenMPI
        run: |
           echo "I am here"
           pwd
           echo "I can see"
           ls
           echo "Going to install ompi"
           cd openmpi-4.0.2
           sudo make install
           sudo ldconfig
           cd -
      - name: Install Python packages
        run:  $PY -mpip install numpy sphinx svgwrite sphinx-rtd-theme mpi4py
      - name: Clone w/ submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Check config
        run: |
          $CC --version
          $CXX --version
          $PY --version
          echo "Hit chached MPI '${{ steps.cache-ompi.outputs.cache-hit }}'"
          mpic++ --show
          mpicc --show
      - name: Install arbor
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARB_WITH_PYTHON=ON -DPYTHON_EXECUTABLE=`which $PY` -DARB_WITH_MPI=${{ matrix.mpi }}
          make VERBOSE=1 tests examples html
          sudo make VERBOSE=1 install
          cd -
      - name: "Run unit tests"
        run:  build/bin/unit
      - if:   ${{ matrix.mpi == 'ON' }}
        name: Run MPI tests
        run:  mpirun -n 4 -oversubscribe build/bin/unit-mpi      
      - name: Run python tests
        run:  $PY python/test/unit/runner.py
      - if:   ${{ matrix.mpi == 'ON' }}
        name: Run python+MPI tests
        run:  mpirun -n 4 -oversubscribe $PY python/test/unit_distributed/runner.py
      - name: Run Python examples
        run: |
            $PY python/example/network_ring.py
            $PY python/example/single_cell_model.py
            $PY python/example/single_cell_recipe.py
            $PY python/example/single_cell_multi_branch.py
            $PY python/example/single_cell_swc.py test/unit/swc/pyramidal.swc
