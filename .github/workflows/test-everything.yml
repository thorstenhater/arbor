name: Test Everything

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  testallconfigs:
    name: "Tests across OSes, versions, compilers, and build configs."
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name:  "Linux Min GCC",
            os:    "ubuntu-20.04",
            cc:    "gcc-9",
            cxx:   "g++-9",
            py:    "3.7",
            cmake: "3.19.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "Linux Min Clang",
            os:    "ubuntu-20.04",
            cc:    "clang-9",
            cxx:   "clang++-9",
            py:    "3.7",
            cmake: "3.19.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "MacOS Min",
            os:    "macos-11",
            cc:    "clang",
            cxx:   "clang++",
            py:    "3.7",
            cmake: "3.19.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "Linux Max GCC",
            os:    "ubuntu-22.04",
            cc:    "gcc-11",
            cxx:   "g++-11",
            py:    "3.10",
            cmake: "3.22.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "Linux SIMD",
            os:    "ubuntu-22.04",
            cc:    "gcc-11",
            cxx:   "g++-11",
            py:    "3.10",
            cmake: "3.22.x",
            mpi:   "OFF",
            simd:  "ON"
          }
        - {
            name:  "Linux Max Clang",
            os:    "ubuntu-22.04",
            cc:    "clang-14",
            cxx:   "clang++-14",
            py:    "3.10",
            cmake: "3.22.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "MacOS Max",
            os:    "macos-12",
            cc:    "clang",
            cxx:   "clang++",
            py:    "3.10",
            cmake: "3.22.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        variant: [static, shared]
    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
        # We set PYTHONPATH instead of installing arbor to avoid distribution/OS specific behaviour.
        PYTHONPATH: ${{ github.workspace }}/build/python
        # This is a workaround for the unfortunate interaction of MacOS and OpenMPI 4
        # See https://github.com/open-mpi/ompi/issues/6518
        OMPI_MCA_btl: "self,tcp"
    steps:
      - name: "Linux: get build dependencies"
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libopenmpi-dev ${{ matrix.config.cc }}
      - name: "MacOS: get build dependencies"
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        run: |
          brew install libxml2 openmpi
      - name: Set up cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: ${{ matrix.config.cmake }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.config.py }}
      - name: Update pip
        run: python -m pip install --upgrade pip
      # - name: OpenMPI cache
        # uses: actions/cache@v3
        # id:   cache-ompi
        # with:
          # path: ~/openmpi-4.1.4
          # key:  ${{ matrix.config.os }}-openmpi-4.1.4-${{ matrix.config.cxx }}
      # - name: Build OpenMPI
        # if: ${{ steps.cache-ompi.outputs.cache-hit != 'true' }}
        # run: |
           # echo cache-hit='${{ steps.cache-ompi.outputs.cache-hit }}'
           # cd ~
           # wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.4.tar.gz
           # tar -xvf ./openmpi-4.1.4.tar.gz
           # cd openmpi-4.1.4
           # ./configure --disable-mpi-fortran
           # make -j4
      # - name: Install OpenMPI
        # run: |
           # echo "Going to install ompi"
           # cd ~
           # cd openmpi-4.1.4
           # sudo make install
           # cd -
      # - name: Update shared library cache
        # if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        # run: sudo ldconfig
      - name: Install Python packages
        run:  pip install numpy sphinx svgwrite sphinx-rtd-theme mpi4py pandas seaborn
      - name: Clone w/ submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Check config
        run: |
          $CC --version
          $CXX --version
          python --version
          mpic++ --show
          mpicc --show
          echo $PYTHONPATH
      - if:   ${{ matrix.variant == 'static' }}
        name: Build arbor
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARB_WITH_PYTHON=ON -DARB_VECTORIZE=${{ matrix.config.simd }} -DPython3_EXECUTABLE=`which python` -DARB_WITH_MPI=${{ matrix.config.mpi }} -DARB_USE_BUNDLED_LIBS=ON -DARB_WITH_NEUROML=ON
          make -j4 tests examples pyarb html
          cd -
      - if:   ${{ matrix.variant == 'shared' }}
        name: Build arbor
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARB_WITH_PYTHON=ON -DARB_VECTORIZE=${{ matrix.config.simd }} -DPython3_EXECUTABLE=`which python` -DARB_WITH_MPI=${{ matrix.config.mpi }} -DARB_USE_BUNDLED_LIBS=ON -DARB_WITH_NEUROML=ON -DBUILD_SHARED_LIBS=ON
          make -j4 tests examples pyarb html
          cd -
      - name: Install arbor
        run: |
          cd build
          sudo make install
          cd -
      - name: Run unit tests
        run: |
          build/bin/unit
          build/bin/unit-modcc
      - if:   ${{ matrix.config.mpi == 'ON' }}
        name: Run MPI tests
        run:  mpirun -n 4 -oversubscribe build/bin/unit-mpi
      - if:   ${{ matrix.config.mpi == 'OFF' }}
        name: Run examples
        run: scripts/run_cpp_examples.sh
      - if:   ${{ matrix.config.mpi == 'ON' }}
        name: Run examples with MPI
        run: scripts/run_cpp_examples.sh "mpirun -n 4 -oversubscribe"
      - name: Run python tests
        run: |
          python3 -m unittest discover -v -s python
      - if:   ${{ matrix.config.mpi == 'ON' }}
        name: Run python+MPI tests
        run:  mpirun -n 4 -oversubscribe python3 -m unittest discover -v -s python
      # - name: Run Python examples (plotting leads to time outs on macos, the step under testpip is enough)
      #   run: scripts/run_python_examples.sh
      - name: Build and test a catalogue
        run: |
          arbor-build-catalogue -v default mechanisms/default
          ./scripts/test-catalogue.py ./default-catalogue.so
  testpip:
    name: "Pip build test + Python examples test"
    runs-on: ubuntu-latest
    steps:
      - name: Clone w/ submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build and install Arbor using pip + build flags
        run: CMAKE_ARGS="-DARB_VECTORIZE=ON -DARB_ARCH=native" python3 -m pip install .
      - name: Check that build flags match
        run: |
          python3 -c "import arbor; print(arbor.config())" | grep -q "'arch': 'native'"
      - name: Run Python tests
        run: python3 -m unittest discover -v -s python
      - name: Run Python examples
        run: scripts/run_python_examples.sh
